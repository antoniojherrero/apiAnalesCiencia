Este proyecto implementa una interfaz de programación REST desarrollada sobre
el framework Slim. La aplicación proporciona las operaciones
habituales para la gestión de Productos, Entidades y Personas.

Para hacer más sencilla la gestión de los datos se ha utilizado
el ORM [Doctrine][doctrine]. Doctrine 2 es un Object-Relational Mapper que proporciona
persistencia transparente para objetos PHP. Utiliza el patrón Data Mapper
con el objetivo de obtener un desacoplamiento completo entre la lógica de negocio y la
persistencia de los datos en los sistemas de gestión de bases de datos.

Para su configuración, este proyecto se apoya en el componente Dotenv, que
permite realizar la configuración a través de variables de entorno.

## Instalación del proyecto

El primer paso consiste en generar dos esquemas de base de datos vacíos y una pareja usuario/contraseña
con privilegios completos sobre dicho esquema:

> DATABASE_NAME=t2023
> DATABASE_TEST_NAME=t2023_test
> DATABASE_USER=t2023
> DATABASE_PASSWD=t2023

Una vez realizado esto, se deben ejecutar los siguientes comandos:
> composer install
> bin/doctrine orm:schema:update --dump-sql --force

Para verificar la validez de la información de mapeo y la sincronización con la base de datos:
> bin/doctrine orm:validate

## Puesta en marcha de la aplicación

Para acceder a la aplicación utilizando el servidor interno del intérprete
de PHP se ejecutará el comando:

> php -S 127.0.0.1:8000 -t public

Una vez hecho esto, la aplicación estará disponible en http://127.0.0.1:8000/

Si se quieren hacer pruebas sin ejecutar los test se han de crear Usuarios son el script ./src/scripts/newUser.php
que crea usuarios de la aplicación de forma aleatoria. Además, se podrán crear elementos(Productos, Entidades o Personas)
aleatorios con el script create.php

## Implementación

La implementación requerida en este proyecto se resume a la programación del cuerpo de las siguientes funciones:

- PersonQueryController::getPersonname
- PersonRelationsController::getEntities
- PersonRelationsController::operationEntity
- PersonRelationsController::getProducts
- PersonRelationsController::operationProduct

- EntityQueryController::getEntityname
- EntityRelationsController::getPersons
- EntityRelationsController::operationPerson
- EntityRelationsController::getProducts
- EntityRelationsController::operationProduct

getPersonname y getEntityname son dos funciones con un cuerpo similar. Se reducen a retornar la llamada de la función
ElementBaseQueryController::getElementByName la cual devuelve un objeto response con status code 204 en caso de que exista el elemento con nombre
igual al especificado en el parámetro(personname o entityname según corresponda); el status code es 404 en caso de que no se encuentre.

Las funciones getEntities, getProducts(rel. personas), getProducts(rel. entidades)  y getPersons son similares. Todos ellos obtienen mediante
el EntityManager de Doctrine el elemento (Persona o Entidad según corresponda) y obtener el conjunto de objetos relacionados(Productos, Entidades o Personas)
a dicho elemento. Por último se llama a la función  ElementRelationsBaseController::getElements que genera el objeto Response.

Por último, las funciones 'operation' son también similares. Simplemente llaman a la función  ElementRelationsBaseController::operationRelatedElements
pasando como parámetro la petición, la respuesta, el array de argumentos y el nombre de la clase de elemento a añadir o eliminar. Esta función recupera el elemento
a editar, el elemento relacionado con éste y si ambos existen ejecuta la operación especificada en el path de la petición añadiendo o eliminando según
corresponda.

## Especificación de la API

Se ha completado la especificación proporcionada inicialmente añadiendo los endpoints correspondientes a Personas y Entidades. Estos endpoints son
los correspondientes a las operaciones básicas de un elemento tales como GET, cGET, POST, PUT, DELETE, OPTIONS; y los correspondientes a las operaciones
relacionadas con las implementaciones descritas en el apartado anterior como:

- GET /persons/personname/{personname}
- GET /persons/{personId}/entities
- GET /persons/{personId}/products
- PUT /persons/{personId}/products/{operation}/{productId}
- PUT /persons/{personId}/entities/{operation}/{entityId}

- GET /entities/entityname/{entityname}
- GET /entities/{entityId}/products
- GET /entities/{entityId}/persons
- PUT /entities/{entityId}/products/{operation}/{productId}
- PUT /entities/{entityId}/persons/{operation}/{personId}

Además, se ha tenido que incorporar en el apartado 'parameters' de la especificación personName y entityName ya que no existian inicialmente.